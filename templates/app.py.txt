# Import libraries
from flask import Flask, request, url_for, redirect, render_template

# Instantiate Flask functionality
app = Flask(__name__)

# Sample data
transactions = [
    {'id': 1, 'date' : '2023-06-01', 'amount' : 100},
    {'id': 2, 'date' : '2023-06-02', 'amount' : -200},
    {'id': 3, 'date' : '2023-06-03', 'amount' : 300}
]

# Read operation
@app.route("/")
def get_transactions():
    return render_template("transactions.html", transactions = transactions, total_balance = total_balance)

# Create operation
@app.route("/add", methods = ["GET", "POST"])
def add_transaction():
    if request.method == 'POST' :
        #create a new transaction
        transaction = {
            'id' : len(transactions) + 1,
            'date' : request.form['date'],
            'amount' : float(request.form['amount'])
        }
        # Append the new transaction to the list
        transactions.append(transaction)


        # Redirect to transaction list page
        return redirect(url_for("get_transactions"))

    # Render the form template to display the add transaction form
    return render_template("form.html")

# Update operation
@app.route("/edit/<int:transaction_id>", methods = ["POST", "GET"])
def edit_transaction(transaction_id):
    if request.method == 'POST' :
        date = request.form['date']
        amount = float(request.form['amount'])

        #Find the transaction with the ID that matches and update its value

        for transaction in transactions:
            if transaction['id'] == transaction_id:
                transaction['date'] = date
                transaction['amount'] = amount
                break

        # Redirect to transactions list page
        return redirect(url_for("get_transactions"))

    #find transactions with ID that matches and render the edit form
    for transaction in transactions:
        if transaction['id'] == transaction_id:
            return render_template("edit.html", transaction = transaction)


# Delete operation
@app.route("/delete/<int:transaction_id>")
def delete_transaction(transaction_id):

    # Find the transaction with ID that matches and remove it from transactions list
    for transaction in transactions:
        if transaction['id'] == transaction_id:
            transactions.remove(transaction)

            break

    
    # Redirect to the transactions list page
    return redirect(url_for("get_transactions"))

# Add search feature
@app.route("/search", methods = ["POST", "GET"])
def search_transactions():
    if request.method == 'POST':
        
        min_value = float(request.form['min_amount'])      
        max_value = float(request.form['max_amount'])

        #creating a new transaction list
        filtered_transactions = [transaction for transaction in transactions if min_value <= transaction['amount'] <= max_value]

        # calculate total balance for filtered_transactions
        def total_balance():
            balance = sum(transaction['amount'] for transaction in filtered_transactions)
            return balance
        return render_template("transactions.html", transactions = filtered_transactions, total_balance = total_balance)

    return render_template("search.html")


# Function to calculate total balance
def calculate_total_balance():
    total_balance = sum(transaction['amount'] for transaction in transactions)
    return total_balance

# Function to calculate total balance and display it
@app.route("/balance")
def total_balance():
    total_balance = calculate_total_balance()
    return f"{total_balance}"

# Run the Flask app
if __name__ == "__main__":
    app.run(debug=True)
    